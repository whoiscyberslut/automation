ip_regex = r'(?<!\d)(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?!\d)'
ipv4_regex = r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
'''
[ip for ip in ip_addresses if ip == ip_address] # iterates over each element (ip) in the ip_addresses list and filters out only those elements that are equal to the current ip_address; so, for each ip_address in 
the list this expression creates a list containing only occurrences of that ip_address
len(...): this calculates the length of the list generated by the list comprehension. In other words, it counts how many elements are in the list that contains only occurrences of the current ip_address.

So, altogether len([ip for ip in ip_addresses if ip == ip_address]) calculates how many times the current ip_address appears in the ip_addresses list. This value represents the number of files associated with that 
ip_address.
'''

# https://pythontutor.com/visualize.html#mode=edit
# https://regex101.com
# https://strftime.org

# Example 1: Parse an apache log file and find out the IP address. We need to count the number of times the IP address repeat, which means after parsing if:

'''
192.168.0.1
192.168.0.1
192.168.0.1

We need an output like 192.168.0.1, 3 (and save this in the csv file)
''''

# To count the number of times the IP addresses repeat themselves, we can use a module called collections

from collections import Counter
a = [1,2,2,3,1,3,4]
print(Counter(a)) # passing the list to Counter

# Output: Counter({1: 2, 2: 2, 3: 2, 4: 1})

for k, v in Counter(ip_list).items():
  print(k, v)

# Output example: 194.5.53.89 1; 20.191.45.212 4...

# Next: save the output of this program into csv file:

import csv

fwritercsv.writerow(["IP_Address", "Count"]) # open a file and write a row where this would act as our header

# Last step: make it user-friendly

import argparse

my_parser = argparse.ArgumentParser(description="Reading the log  file")

my_parser.add_argument("logfile", help="Please enter the logfile to parse", type=argparse.FileType("r"))
# This is a positional argument; if i want to add it as an optional argument, i can write it like so:
my_parser.add_argument("--logfile", help="Please enter the logfile to parse", type=argparse.FileType("r"))

# Next step:
args = my_parser.parse_args() # executing the parser using parse_args()

with args.logfile as f: # instead of with open(logfile) as f
